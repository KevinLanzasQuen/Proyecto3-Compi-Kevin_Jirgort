
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 20 19:10:20 CST 2022
//----------------------------------------------------

package ejerciciojflex;

import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 20 19:10:20 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\004\000\002\033\002\000\002\002" +
    "\012\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\011\005\000\002\011\007" +
    "\000\002\011\007\000\002\011\005\000\002\011\005\000" +
    "\002\011\007\000\002\011\006\000\002\011\006\000\002" +
    "\011\007\000\002\022\005\000\002\022\003\000\002\023" +
    "\002\000\002\023\003\000\002\025\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\005\000\002\015" +
    "\005\000\002\015\007\000\002\015\006\000\002\015\007" +
    "\000\002\014\005\000\002\014\007\000\002\014\006\000" +
    "\002\014\007\000\002\034\002\000\002\006\007\000\002" +
    "\030\004\000\002\005\004\000\002\027\004\000\002\027" +
    "\005\000\002\027\003\000\002\027\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\004\000\002" +
    "\035\002\000\002\036\002\000\002\010\010\000\002\032" +
    "\004\000\002\037\002\000\002\016\012\000\002\040\002" +
    "\000\002\016\012\000\002\041\002\000\002\016\012\000" +
    "\002\042\002\000\002\016\012\000\002\043\002\000\002" +
    "\016\012\000\002\044\002\000\002\016\013\000\002\045" +
    "\002\000\002\016\013\000\002\046\002\000\002\016\013" +
    "\000\002\047\002\000\002\016\013\000\002\050\002\000" +
    "\002\016\013\000\002\017\003\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\022\005\001\002\000\004\002\310\001" +
    "\002\000\004\050\006\001\002\000\004\045\007\001\002" +
    "\000\004\044\010\001\002\000\004\047\000\001\002\000" +
    "\004\047\012\001\002\000\032\006\023\020\042\022\025" +
    "\023\044\024\040\027\043\045\033\047\032\057\016\060" +
    "\041\074\026\075\021\001\002\000\034\013\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\001\002\000\034" +
    "\006\uffca\020\uffca\022\uffca\023\uffca\024\uffca\027\uffca\045" +
    "\uffca\046\uffca\047\uffca\057\uffca\060\uffca\074\uffca\075\uffca" +
    "\001\002\000\034\006\ufffa\020\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\027\ufffa\045\ufffa\046\ufffa\047\ufffa\057\ufffa\060\ufffa" +
    "\074\ufffa\075\ufffa\001\002\000\004\020\267\001\002\000" +
    "\034\006\023\020\042\022\025\023\044\024\040\027\043" +
    "\045\033\046\266\047\032\057\016\060\041\074\026\075" +
    "\021\001\002\000\014\006\023\020\120\045\033\071\166" +
    "\075\021\001\002\000\034\013\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\070\uffdc\001\002\000\034\006\ufffc\020" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\027\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\057\ufffc\060\ufffc\074\ufffc\075\ufffc\001\002\000" +
    "\034\013\uffda\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda" +
    "\045\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070" +
    "\uffda\001\002\000\034\006\ufff2\020\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\027\ufff2\045\ufff2\046\ufff2\047\ufff2\057\ufff2\060" +
    "\ufff2\074\ufff2\075\ufff2\001\002\000\004\020\241\001\002" +
    "\000\004\020\216\001\002\000\034\006\ufffe\020\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\027\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\057\ufffe\060\ufffe\074\ufffe\075\ufffe\001\002\000\010\013" +
    "\215\040\127\041\126\001\002\000\034\006\ufff8\020\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\027\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\057\ufff8\060\ufff8\074\ufff8\075\ufff8\001\002\000\032" +
    "\006\023\020\042\022\025\023\044\024\040\027\043\045" +
    "\033\047\032\057\016\060\041\074\026\075\021\001\002" +
    "\000\012\006\023\020\120\045\033\075\021\001\002\000" +
    "\034\006\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\027\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\057\ufff4\060\ufff4\074\ufff4\075" +
    "\ufff4\001\002\000\034\006\uffc9\020\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\027\uffc9\045\uffc9\046\uffc9\047\uffc9\057\uffc9\060" +
    "\uffc9\074\uffc9\075\uffc9\001\002\000\034\013\uffe0\037\132" +
    "\040\uffe0\041\uffe0\043\131\044\uffe0\045\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\001\002\000\014" +
    "\006\uffc1\020\uffc1\045\uffc1\071\uffc1\075\uffc1\001\002\000" +
    "\004\045\164\001\002\000\004\020\141\001\002\000\016" +
    "\011\117\013\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\001" +
    "\002\000\004\045\116\001\002\000\004\020\046\001\002" +
    "\000\034\006\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\027" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\057\ufff7\060\ufff7\074\ufff7" +
    "\075\ufff7\001\002\000\010\011\047\013\051\045\050\001" +
    "\002\000\012\013\uffe5\015\111\020\105\040\uffe5\001\002" +
    "\000\020\006\uffb1\010\uffb1\015\uffb1\020\uffb1\021\uffb1\044" +
    "\053\075\uffb1\001\002\000\034\006\uffec\020\uffec\022\uffec" +
    "\023\uffec\024\uffec\027\uffec\045\uffec\046\uffec\047\uffec\057" +
    "\uffec\060\uffec\074\uffec\075\uffec\001\002\000\016\006\067" +
    "\010\075\015\076\020\070\021\071\075\074\001\002\000" +
    "\004\047\uffbb\001\002\000\004\047\055\001\002\000\032" +
    "\006\023\020\042\022\025\023\044\024\040\027\043\045" +
    "\033\047\032\057\016\060\041\074\026\075\021\001\002" +
    "\000\034\006\023\020\042\022\025\023\044\024\040\027" +
    "\043\045\033\046\063\047\032\057\016\060\041\074\026" +
    "\075\021\001\002\000\034\006\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\027\ufff5\045\ufff5\046\ufff5\047\ufff5\057\ufff5" +
    "\060\ufff5\074\ufff5\075\ufff5\001\002\000\034\006\ufffd\020" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\027\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\057\ufffd\060\ufffd\074\ufffd\075\ufffd\001\002\000" +
    "\034\006\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\027\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\057\ufff1\060\ufff1\074\ufff1\075" +
    "\ufff1\001\002\000\034\006\ufffb\020\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\027\ufffb\045\ufffb\046\ufffb\047\ufffb\057\ufffb\060" +
    "\ufffb\074\ufffb\075\ufffb\001\002\000\034\006\uffba\020\uffba" +
    "\022\uffba\023\uffba\024\uffba\027\uffba\045\uffba\046\uffba\047" +
    "\uffba\057\uffba\060\uffba\074\uffba\075\uffba\001\002\000\034" +
    "\006\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\027\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\057\ufff9\060\ufff9\074\ufff9\075\ufff9" +
    "\001\002\000\034\006\ufff3\020\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\027\ufff3\045\ufff3\046\ufff3\047\ufff3\057\ufff3\060\ufff3" +
    "\074\ufff3\075\ufff3\001\002\000\034\006\ufff6\020\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\027\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\057\ufff6\060\ufff6\074\ufff6\075\ufff6\001\002\000\006\044" +
    "\uffa5\053\uffa5\001\002\000\006\044\uffa2\053\uffa2\001\002" +
    "\000\006\044\uffa3\053\uffa3\001\002\000\006\044\uffa9\053" +
    "\103\001\002\000\004\044\077\001\002\000\006\044\uffa7" +
    "\053\uffa7\001\002\000\006\044\uffa4\053\uffa4\001\002\000" +
    "\006\044\uffa6\053\uffa6\001\002\000\004\047\100\001\002" +
    "\000\032\006\023\020\042\022\025\023\044\024\040\027" +
    "\043\045\033\047\032\057\016\060\041\074\026\075\021" +
    "\001\002\000\034\006\023\020\042\022\025\023\044\024" +
    "\040\027\043\045\033\046\102\047\032\057\016\060\041" +
    "\074\026\075\021\001\002\000\034\006\uffb0\020\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\027\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\057\uffb0\060\uffb0\074\uffb0\075\uffb0\001\002\000\016\006" +
    "\067\010\075\015\076\020\070\021\071\075\074\001\002" +
    "\000\004\044\uffa8\001\002\000\004\013\115\001\002\000" +
    "\006\013\uffe6\040\uffe6\001\002\000\006\013\112\040\113" +
    "\001\002\000\006\013\uffe4\040\uffe4\001\002\000\006\013" +
    "\uffe3\040\uffe3\001\002\000\034\006\uffeb\020\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\027\uffeb\045\uffeb\046\uffeb\047\uffeb\057" +
    "\uffeb\060\uffeb\074\uffeb\075\uffeb\001\002\000\010\013\uffe5" +
    "\015\111\040\uffe5\001\002\000\006\013\uffe7\040\uffe7\001" +
    "\002\000\034\006\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\027\uffe8\045\uffe8\046\uffe8\047\uffe8\057\uffe8\060\uffe8\074" +
    "\uffe8\075\uffe8\001\002\000\014\006\uffbe\020\uffbe\045\uffbe" +
    "\071\uffbe\075\uffbe\001\002\000\020\006\023\010\122\015" +
    "\121\020\120\021\123\045\033\075\021\001\002\000\034" +
    "\013\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb" +
    "\001\002\000\004\013\140\001\002\000\004\013\137\001" +
    "\002\000\004\013\136\001\002\000\010\013\125\040\127" +
    "\041\126\001\002\000\034\006\uffea\020\uffea\022\uffea\023" +
    "\uffea\024\uffea\027\uffea\045\uffea\046\uffea\047\uffea\057\uffea" +
    "\060\uffea\074\uffea\075\uffea\001\002\000\012\006\023\020" +
    "\120\045\033\075\021\001\002\000\012\006\023\020\120" +
    "\045\033\075\021\001\002\000\034\013\uffe2\037\132\040" +
    "\uffe2\041\uffe2\043\131\044\uffe2\045\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\070\uffe2\001\002\000\012\006" +
    "\023\020\120\045\033\075\021\001\002\000\012\006\023" +
    "\020\120\045\033\075\021\001\002\000\034\013\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\063\uffdf" +
    "\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001\002\000" +
    "\034\013\uffde\037\uffde\040\uffde\041\uffde\043\uffde\044\uffde" +
    "\045\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070" +
    "\uffde\001\002\000\034\013\uffe1\037\132\040\uffe1\041\uffe1" +
    "\043\131\044\uffe1\045\uffe1\063\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\067\uffe1\070\uffe1\001\002\000\034\006\uffd6\020\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\027\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\057\uffd6\060\uffd6\074\uffd6\075\uffd6\001\002\000\034" +
    "\006\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\027\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\057\uffd2\060\uffd2\074\uffd2\075\uffd2" +
    "\001\002\000\034\006\uffe9\020\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\027\uffe9\045\uffe9\046\uffe9\047\uffe9\057\uffe9\060\uffe9" +
    "\074\uffe9\075\uffe9\001\002\000\010\011\142\013\144\045" +
    "\143\001\002\000\006\010\161\020\160\001\002\000\020" +
    "\006\uffad\010\uffad\015\uffad\020\uffad\021\uffad\044\145\075" +
    "\uffad\001\002\000\034\006\uffd4\020\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\027\uffd4\045\uffd4\046\uffd4\047\uffd4\057\uffd4\060" +
    "\uffd4\074\uffd4\075\uffd4\001\002\000\004\047\uffb5\001\002" +
    "\000\016\006\067\010\075\015\076\020\070\021\071\075" +
    "\074\001\002\000\004\044\150\001\002\000\004\047\151" +
    "\001\002\000\032\006\023\020\042\022\025\023\044\024" +
    "\040\027\043\045\033\047\032\057\016\060\041\074\026" +
    "\075\021\001\002\000\034\006\023\020\042\022\025\023" +
    "\044\024\040\027\043\045\033\046\153\047\032\057\016" +
    "\060\041\074\026\075\021\001\002\000\034\006\uffac\020" +
    "\uffac\022\uffac\023\uffac\024\uffac\027\uffac\045\uffac\046\uffac" +
    "\047\uffac\057\uffac\060\uffac\074\uffac\075\uffac\001\002\000" +
    "\004\047\155\001\002\000\032\006\023\020\042\022\025" +
    "\023\044\024\040\027\043\045\033\047\032\057\016\060" +
    "\041\074\026\075\021\001\002\000\034\006\023\020\042" +
    "\022\025\023\044\024\040\027\043\045\033\046\157\047" +
    "\032\057\016\060\041\074\026\075\021\001\002\000\034" +
    "\006\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\027\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\057\uffb4\060\uffb4\074\uffb4\075\uffb4" +
    "\001\002\000\004\013\163\001\002\000\004\013\162\001" +
    "\002\000\034\006\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\027\uffd3\045\uffd3\046\uffd3\047\uffd3\057\uffd3\060\uffd3\074" +
    "\uffd3\075\uffd3\001\002\000\034\006\uffd1\020\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\027\uffd1\045\uffd1\046\uffd1\047\uffd1\057" +
    "\uffd1\060\uffd1\074\uffd1\075\uffd1\001\002\000\014\006\uffce" +
    "\020\uffce\045\uffce\071\uffce\075\uffce\001\002\000\014\006" +
    "\023\020\120\045\033\071\166\075\021\001\002\000\014" +
    "\006\023\020\120\045\033\071\166\075\021\001\002\000" +
    "\022\040\127\041\126\063\176\064\200\065\174\066\201" +
    "\067\175\070\177\001\002\000\004\044\171\001\002\000" +
    "\020\006\uffc0\020\uffc0\024\uffc0\027\uffc0\045\uffc0\047\uffc0" +
    "\075\uffc0\001\002\000\020\006\023\020\120\024\040\027" +
    "\043\045\033\047\032\075\021\001\002\000\034\006\uffbf" +
    "\020\uffbf\022\uffbf\023\uffbf\024\uffbf\027\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\057\uffbf\060\uffbf\074\uffbf\075\uffbf\001\002" +
    "\000\012\006\023\020\120\045\033\075\021\001\002\000" +
    "\012\006\023\020\120\045\033\075\021\001\002\000\012" +
    "\006\023\020\120\045\033\075\021\001\002\000\012\006" +
    "\023\020\120\045\033\075\021\001\002\000\012\006\023" +
    "\020\120\045\033\075\021\001\002\000\012\006\023\020" +
    "\120\045\033\075\021\001\002\000\010\040\127\041\126" +
    "\044\uffc5\001\002\000\010\040\127\041\126\044\uffc7\001" +
    "\002\000\010\040\127\041\126\044\uffc3\001\002\000\010" +
    "\040\127\041\126\044\uffc8\001\002\000\010\040\127\041" +
    "\126\044\uffc4\001\002\000\010\040\127\041\126\044\uffc6" +
    "\001\002\000\004\044\uffc2\001\002\000\010\040\127\041" +
    "\126\045\212\001\002\000\034\013\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\043\uffd9\044\uffd9\045\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\001\002\000\034\006\023" +
    "\020\042\022\025\023\044\024\040\027\043\045\033\046" +
    "\214\047\032\057\016\060\041\074\026\075\021\001\002" +
    "\000\034\006\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\027" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\057\uffcb\060\uffcb\074\uffcb" +
    "\075\uffcb\001\002\000\034\006\uffcc\020\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\027\uffcc\045\uffcc\046\uffcc\047\uffcc\057\uffcc" +
    "\060\uffcc\074\uffcc\075\uffcc\001\002\000\010\011\217\013" +
    "\221\045\220\001\002\000\006\020\235\021\236\001\002" +
    "\000\020\006\uffab\010\uffab\015\uffab\020\uffab\021\uffab\044" +
    "\222\075\uffab\001\002\000\034\006\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\027\uffd8\045\uffd8\046\uffd8\047\uffd8\057" +
    "\uffd8\060\uffd8\074\uffd8\075\uffd8\001\002\000\004\047\uffb7" +
    "\001\002\000\016\006\067\010\075\015\076\020\070\021" +
    "\071\075\074\001\002\000\004\044\225\001\002\000\004" +
    "\047\226\001\002\000\032\006\023\020\042\022\025\023" +
    "\044\024\040\027\043\045\033\047\032\057\016\060\041" +
    "\074\026\075\021\001\002\000\034\006\023\020\042\022" +
    "\025\023\044\024\040\027\043\045\033\046\230\047\032" +
    "\057\016\060\041\074\026\075\021\001\002\000\034\006" +
    "\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa\027\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\057\uffaa\060\uffaa\074\uffaa\075\uffaa\001" +
    "\002\000\004\047\232\001\002\000\032\006\023\020\042" +
    "\022\025\023\044\024\040\027\043\045\033\047\032\057" +
    "\016\060\041\074\026\075\021\001\002\000\034\006\023" +
    "\020\042\022\025\023\044\024\040\027\043\045\033\046" +
    "\234\047\032\057\016\060\041\074\026\075\021\001\002" +
    "\000\034\006\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\027" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\057\uffb6\060\uffb6\074\uffb6" +
    "\075\uffb6\001\002\000\004\013\240\001\002\000\004\013" +
    "\237\001\002\000\034\006\uffd7\020\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\027\uffd7\045\uffd7\046\uffd7\047\uffd7\057\uffd7\060" +
    "\uffd7\074\uffd7\075\uffd7\001\002\000\034\006\uffd5\020\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\027\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\057\uffd5\060\uffd5\074\uffd5\075\uffd5\001\002\000\010" +
    "\011\242\013\244\045\243\001\002\000\012\006\023\020" +
    "\120\045\033\075\021\001\002\000\020\006\uffb3\010\uffb3" +
    "\015\uffb3\020\uffb3\021\uffb3\044\245\075\uffb3\001\002\000" +
    "\034\006\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\027\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\057\ufff0\060\ufff0\074\ufff0\075" +
    "\ufff0\001\002\000\004\047\uffbd\001\002\000\016\006\067" +
    "\010\075\015\076\020\070\021\071\075\074\001\002\000" +
    "\004\044\250\001\002\000\004\047\251\001\002\000\032" +
    "\006\023\020\042\022\025\023\044\024\040\027\043\045" +
    "\033\047\032\057\016\060\041\074\026\075\021\001\002" +
    "\000\034\006\023\020\042\022\025\023\044\024\040\027" +
    "\043\045\033\046\253\047\032\057\016\060\041\074\026" +
    "\075\021\001\002\000\034\006\uffb2\020\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\027\uffb2\045\uffb2\046\uffb2\047\uffb2\057\uffb2" +
    "\060\uffb2\074\uffb2\075\uffb2\001\002\000\004\047\255\001" +
    "\002\000\032\006\023\020\042\022\025\023\044\024\040" +
    "\027\043\045\033\047\032\057\016\060\041\074\026\075" +
    "\021\001\002\000\034\006\023\020\042\022\025\023\044" +
    "\024\040\027\043\045\033\046\257\047\032\057\016\060" +
    "\041\074\026\075\021\001\002\000\034\006\uffbc\020\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\027\uffbc\045\uffbc\046\uffbc\047" +
    "\uffbc\057\uffbc\060\uffbc\074\uffbc\075\uffbc\001\002\000\010" +
    "\013\261\040\127\041\126\001\002\000\034\006\uffef\020" +
    "\uffef\022\uffef\023\uffef\024\uffef\027\uffef\045\uffef\046\uffef" +
    "\047\uffef\057\uffef\060\uffef\074\uffef\075\uffef\001\002\000" +
    "\004\044\263\001\002\000\020\006\uffd0\020\uffd0\024\uffd0" +
    "\027\uffd0\045\uffd0\047\uffd0\075\uffd0\001\002\000\020\006" +
    "\023\020\120\024\040\027\043\045\033\047\032\075\021" +
    "\001\002\000\034\006\uffcf\020\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\027\uffcf\045\uffcf\046\uffcf\047\uffcf\057\uffcf\060\uffcf" +
    "\074\uffcf\075\uffcf\001\002\000\004\002\uffff\001\002\000" +
    "\010\011\270\013\272\045\271\001\002\000\012\006\023" +
    "\020\120\045\033\075\021\001\002\000\020\006\uffaf\010" +
    "\uffaf\015\uffaf\020\uffaf\021\uffaf\044\273\075\uffaf\001\002" +
    "\000\034\006\uffed\020\uffed\022\uffed\023\uffed\024\uffed\027" +
    "\uffed\045\uffed\046\uffed\047\uffed\057\uffed\060\uffed\074\uffed" +
    "\075\uffed\001\002\000\004\047\uffb9\001\002\000\016\006" +
    "\067\010\075\015\076\020\070\021\071\075\074\001\002" +
    "\000\004\044\276\001\002\000\004\047\277\001\002\000" +
    "\032\006\023\020\042\022\025\023\044\024\040\027\043" +
    "\045\033\047\032\057\016\060\041\074\026\075\021\001" +
    "\002\000\034\006\023\020\042\022\025\023\044\024\040" +
    "\027\043\045\033\046\301\047\032\057\016\060\041\074" +
    "\026\075\021\001\002\000\034\006\uffae\020\uffae\022\uffae" +
    "\023\uffae\024\uffae\027\uffae\045\uffae\046\uffae\047\uffae\057" +
    "\uffae\060\uffae\074\uffae\075\uffae\001\002\000\004\047\303" +
    "\001\002\000\032\006\023\020\042\022\025\023\044\024" +
    "\040\027\043\045\033\047\032\057\016\060\041\074\026" +
    "\075\021\001\002\000\034\006\023\020\042\022\025\023" +
    "\044\024\040\027\043\045\033\046\305\047\032\057\016" +
    "\060\041\074\026\075\021\001\002\000\034\006\uffb8\020" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\027\uffb8\045\uffb8\046\uffb8" +
    "\047\uffb8\057\uffb8\060\uffb8\074\uffb8\075\uffb8\001\002\000" +
    "\010\013\307\040\127\041\126\001\002\000\034\006\uffee" +
    "\020\uffee\022\uffee\023\uffee\024\uffee\027\uffee\045\uffee\046" +
    "\uffee\047\uffee\057\uffee\060\uffee\074\uffee\075\uffee\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\010\001\001\000\002\001\001\000\040\004\016\006" +
    "\013\010\034\011\026\012\014\013\033\014\023\015\030" +
    "\016\044\021\027\024\035\026\012\027\021\030\017\032" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\013\010\034\011" +
    "\061\012\056\013\064\014\060\015\063\016\065\021\027" +
    "\024\035\026\012\027\057\030\017\032\036\001\001\000" +
    "\012\021\166\024\035\026\012\031\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\212\006" +
    "\013\010\034\011\026\012\014\013\033\014\023\015\030" +
    "\016\044\021\027\024\035\026\012\027\021\030\017\032" +
    "\036\001\001\000\010\021\210\024\035\026\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\106\023\105" +
    "\025\107\001\001\000\004\045\051\001\001\000\002\001" +
    "\001\000\006\017\072\020\071\001\001\000\004\040\053" +
    "\001\001\000\002\001\001\000\040\004\055\006\013\010" +
    "\034\011\026\012\014\013\033\014\023\015\030\016\044" +
    "\021\027\024\035\026\012\027\021\030\017\032\036\001" +
    "\001\000\036\006\013\010\034\011\061\012\056\013\064" +
    "\014\060\015\063\016\065\021\027\024\035\026\012\027" +
    "\057\030\017\032\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\100\006\013\010\034\011\026\012\014\013\033\014\023" +
    "\015\030\016\044\021\027\024\035\026\012\027\021\030" +
    "\017\032\036\001\001\000\036\006\013\010\034\011\061" +
    "\012\056\013\064\014\060\015\063\016\065\021\027\024" +
    "\035\026\012\027\057\030\017\032\036\001\001\000\002" +
    "\001\001\000\006\017\103\020\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\113\025\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\123\024\035\026" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\134\026\012\001\001\000\006\024\127" +
    "\026\012\001\001\000\002\001\001\000\004\026\133\001" +
    "\001\000\004\026\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\145\001\001\000\002\001\001\000\004\043" +
    "\153\001\001\000\006\017\146\020\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\151\006\013\010" +
    "\034\011\026\012\014\013\033\014\023\015\030\016\044" +
    "\021\027\024\035\026\012\027\021\030\017\032\036\001" +
    "\001\000\036\006\013\010\034\011\061\012\056\013\064" +
    "\014\060\015\063\016\065\021\027\024\035\026\012\027" +
    "\057\030\017\032\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\155\006\013\010\034\011\026\012" +
    "\014\013\033\014\023\015\030\016\044\021\027\024\035" +
    "\026\012\027\021\030\017\032\036\001\001\000\036\006" +
    "\013\010\034\011\061\012\056\013\064\014\060\015\063" +
    "\016\065\021\027\024\035\026\012\027\057\030\017\032" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\166\024\035\026\012\031\167\001\001" +
    "\000\012\021\166\024\035\026\012\031\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\171\001\001" +
    "\000\022\006\013\010\034\021\027\024\035\026\012\027" +
    "\172\030\017\032\036\001\001\000\002\001\001\000\010" +
    "\021\206\024\035\026\012\001\001\000\010\021\205\024" +
    "\035\026\012\001\001\000\010\021\204\024\035\026\012" +
    "\001\001\000\010\021\203\024\035\026\012\001\001\000" +
    "\010\021\202\024\035\026\012\001\001\000\010\021\201" +
    "\024\035\026\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\006\013\010\034\011\061\012\056" +
    "\013\064\014\060\015\063\016\065\021\027\024\035\026" +
    "\012\027\057\030\017\032\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\222\001\001\000\002\001\001\000\004\042\230" +
    "\001\001\000\006\017\223\020\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\226\006\013\010\034" +
    "\011\026\012\014\013\033\014\023\015\030\016\044\021" +
    "\027\024\035\026\012\027\021\030\017\032\036\001\001" +
    "\000\036\006\013\010\034\011\061\012\056\013\064\014" +
    "\060\015\063\016\065\021\027\024\035\026\012\027\057" +
    "\030\017\032\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\232\006\013\010\034\011\026\012\014" +
    "\013\033\014\023\015\030\016\044\021\027\024\035\026" +
    "\012\027\021\030\017\032\036\001\001\000\036\006\013" +
    "\010\034\011\061\012\056\013\064\014\060\015\063\016" +
    "\065\021\027\024\035\026\012\027\057\030\017\032\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\257\024\035\026\012\001\001\000\004\044" +
    "\245\001\001\000\002\001\001\000\004\037\253\001\001" +
    "\000\006\017\246\020\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\251\006\013\010\034\011\026" +
    "\012\014\013\033\014\023\015\030\016\044\021\027\024" +
    "\035\026\012\027\021\030\017\032\036\001\001\000\036" +
    "\006\013\010\034\011\061\012\056\013\064\014\060\015" +
    "\063\016\065\021\027\024\035\026\012\027\057\030\017" +
    "\032\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\255\006\013\010\034\011\026\012\014\013\033" +
    "\014\023\015\030\016\044\021\027\024\035\026\012\027" +
    "\021\030\017\032\036\001\001\000\036\006\013\010\034" +
    "\011\061\012\056\013\064\014\060\015\063\016\065\021" +
    "\027\024\035\026\012\027\057\030\017\032\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\263\001\001\000\022\006\013" +
    "\010\034\021\027\024\035\026\012\027\264\030\017\032" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\305\024\035\026\012\001\001\000" +
    "\004\046\273\001\001\000\002\001\001\000\004\041\301" +
    "\001\001\000\006\017\274\020\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\277\006\013\010\034" +
    "\011\026\012\014\013\033\014\023\015\030\016\044\021" +
    "\027\024\035\026\012\027\021\030\017\032\036\001\001" +
    "\000\036\006\013\010\034\011\061\012\056\013\064\014" +
    "\060\015\063\016\065\021\027\024\035\026\012\027\057" +
    "\030\017\032\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\303\006\013\010\034\011\026\012\014" +
    "\013\033\014\023\015\030\016\044\021\027\024\035\026" +
    "\012\027\021\030\017\032\036\001\001\000\036\006\013" +
    "\010\034\011\061\012\056\013\064\014\060\015\063\016" +
    "\065\021\027\024\035\026\012\027\057\030\017\032\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Object> listaIdentificadores = new ArrayList<Object>(); 
    public int cont = 0;
    public int contG=0;
    public int contErr =0;
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROS_AUX ::= Id 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETROS_AUX ::= Char 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETROS_AUX ::= Boolean 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROS_AUX ::= Flotante 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETROS_AUX ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROS_AUX ::= Entero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROS ::= PARAMETROS_AUX Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETROS ::= PARAMETROS_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FUNCION ::= CharType Id ParentesisA NT$13 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$13 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

           GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
           
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$13",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCION ::= Bool Id ParentesisA NT$12 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$12 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

           GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
           
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCION ::= Float Id ParentesisA NT$11 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$11 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FUNCION ::= String Id ParentesisA NT$10 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$10 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCION ::= Int Id ParentesisA NT$9 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$9 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

           GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION ::= Bool Id ParentesisA ParentesisC NT$8 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$8 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
           
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION ::= CharType Id ParentesisA ParentesisC NT$7 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$7 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
           
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCION ::= Float Id ParentesisA ParentesisC NT$6 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$6 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
          
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FUNCION ::= String Id ParentesisA ParentesisC NT$5 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$5 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

             
            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION ::= Int Id ParentesisA ParentesisC NT$4 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$4 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

            System.out.println("Yisus1");
            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parteWhile ::= While ParentesisA 
            {
              EtiquetaRedir RESULT =null;
		
                                String inicio=GeneradorTresDirecciones.nuevaEtiqueta();
                                String fin=GeneradorTresDirecciones.nuevaEtiqueta();
                                RESULT = new EtiquetaRedir(inicio,fin);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parteWhile",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_WHILE ::= parteWhile NT$2 CONDICION ParentesisC NT$3 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO,null,null,et.getInicio());
                        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,c.f());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,c.v());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$2 ::= 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,et.getInicio());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= Negacion CONDICION 
            {
              DosEtiquetas RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new DosEtiquetas(cond.f(), cond.v());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= EXPR MayorIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMAYORIGUAL, e1, e2, f);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= EXPR Mayor EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMAYOR, e2, e1, v);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= EXPR MenorIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMENORIGUAL, e2, e1, f);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= EXPR Menor EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
        String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMENOR, e1, e2, v);
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= EXPR Diferente EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
        String f = GeneradorTresDirecciones.nuevaEtiqueta();
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFEQUAL, e1, e2, f);    
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= EXPR IgualIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    String v = GeneradorTresDirecciones.nuevaEtiqueta();
    String f = GeneradorTresDirecciones.nuevaEtiqueta();
    GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFEQUAL, e1, e2, v);    
    GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
    RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT ::= SENTENCIA_WHILE 
            {
              String RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT ::= DECLARACION_IF 
            {
              String RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENT ::= LlaveA SENTENCIA LlaveC 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENT ::= EXPR ExprFinal 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = e1; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARTE_ELSE ::= Else SENT 
            {
              Object RESULT =null;
		 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARTE_ELSE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARTEIF ::= If ParentesisA 
            {
              EtiquetaRedir RESULT =null;
		 
        RESULT = new EtiquetaRedir(null,null);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARTEIF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_IF ::= PARTEIF CONDICION ParentesisC NT$1 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
       
        String fin = GeneradorTresDirecciones.nuevaEtiqueta();
        //System.out.println("EL VALOR DE FIN= "+fin);
        et.fin(fin);           
        //System.out.println("EL VALOR DE ET= "+et.getFin());
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, et.getFin());
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, cond.f());
        
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, et.getFin());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$1 ::= 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, cond.v());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_BOOLEAN ::= Bool Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,parser.listaIdentificadores.get(i+1).toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_BOOLEAN ::= Id Asig Boolean ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.set(i+1,n2);
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,n2.toString());
                            System.out.println("Aaaaaaasignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                             parser.contErr+=1;
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCOTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_BOOLEAN ::= Bool Id Asig Boolean ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  System.out.println("Declaracion de variable Boolean "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_BOOLEAN ::= Bool Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"false",null,n2.toString());
                
                 System.out.println("Declaracion de variable Boolean: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_CHAR ::= CharType Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("char")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO CHAR");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_CHAR ::= Id Asig Char ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("char")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,n1.toString());
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCOTRADA NO ES DE TIPO CHAR");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_CHAR ::= CharType Id Asig Char ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  System.out.println("Declaracion de variable Char "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_CHAR ::= CharType Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"",null,n2.toString());
                 System.out.println("Declaracion de variable Char: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TERMINO ::= ParentesisA EXPR ParentesisA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT=e1;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TERMINO ::= Flotante 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		parser.contG+=1; RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TERMINO ::= Id 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    parser.contG+=1;
                    boolean bandera = false;
                    boolean bandera2 = false;
                    for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){

                        if(parser.listaIdentificadores.get(i).equals(n1)){

                                bandera2=true;

                                            
                        }
                        }if(bandera2){
                             RESULT=n1.toString();
                        }else{
                           parser.contErr+=1;
                           System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                           RESULT=n1.toString();
                          
                           
                        }
                            
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TERMINO ::= Entero 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    parser.contG+=1;
                    RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FACTOR ::= TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        
         RESULT=n1;
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FACTOR ::= FACTOR Division TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         String t1=GeneradorTresDirecciones.nuevaTemp();
         GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,t1);
         String t2=GeneradorTresDirecciones.nuevaTemp();
         GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,t2);

         String t3=GeneradorTresDirecciones.nuevaTemp();
         GeneradorTresDirecciones.generador(GeneradorTresDirecciones.DIVISION,t1.toString(),t2.toString(),t3);
         // System.out.println("Pronado n1: " + n1 + " Provando n2 : "+ n2);
         RESULT= t3;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FACTOR ::= FACTOR Multiplicacion TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
     String t1=GeneradorTresDirecciones.nuevaTemp();
     GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,t1);
     String t2=GeneradorTresDirecciones.nuevaTemp();
     GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,t2);

     String t3=GeneradorTresDirecciones.nuevaTemp();
     GeneradorTresDirecciones.generador(GeneradorTresDirecciones.POR,t1.toString(),t2.toString(),t3);
    // System.out.println("Pronado n1: " + n1 + " Provando n2 : "+ n2);
     RESULT= t3;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPR ::= FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               //System.out.println("Este es n1 " + n1);
               
                //GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,parser.listaIdentificadores.get(parser.listaIdentificadores.size()-2).toString());
              RESULT= n1;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPR ::= EXPR Resta FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
              String t1=GeneradorTresDirecciones.nuevaTemp();
              GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,t1);
              String t2=GeneradorTresDirecciones.nuevaTemp();
              GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,t2);

              //String t3=GeneradorTresDirecciones.nuevaTemp();
              //GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MENOS,t1.toString(),t2.toString(),t3);
              // System.out.println("Pronado n1: " + n1 + " Provando n2 : "+ n2);
              RESULT= t2;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPR ::= EXPR Suma FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                String t1=GeneradorTresDirecciones.nuevaTemp();
                GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,t1);
                String t2=GeneradorTresDirecciones.nuevaTemp();
                GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,t2);

                String t3=GeneradorTresDirecciones.nuevaTemp();
                GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MAS,t1.toString(),t2.toString(),t3);
               
                RESULT= t3;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TERMINOSTR ::= Cadena 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    
                    RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINOSTR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FACTORSTR ::= TERMINOSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT=n1;
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTORSTR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FACTORSTR ::= 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTORSTR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRSTR ::= FACTORSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               //System.out.println("Este es n1 " + n1);
                //GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,parser.listaIdentificadores.get(parser.listaIdentificadores.size()-2).toString());
              RESULT= n1;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRSTR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRSTR ::= EXPRSTR Suma FACTORSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               String t=GeneradorTresDirecciones.nuevaTemp();
               GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MAS,n1.toString(),n2.toString(),t);
               //System.out.println("Este es n2 " + n2 + "este es n1: " +n1);
                RESULT= t;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRSTR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_ENTEROS ::= String Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 //System.out.println(n3);
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("string")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,parser.listaIdentificadores.get(i+1).toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO STRING");
                        }
                    }
                }
                if(bandera){

                }else{
                    parser.contErr+=1;
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_ENTEROS ::= Id Asig Cadena ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("string")){
                            parser.listaIdentificadores.set(i+1,n2);
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,n1.toString());
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                            parser.contErr+=1;
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCOTRADA NO ES DE TIPO STRING");
                        }
                    }
                }
                if(bandera){

                }else{
                    parser.contErr+=1;
                    System.out.println("ERROR SEMANTICO:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_ENTEROS ::= Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                
                boolean bandera = false;
                boolean bandera2 = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                            
                            bandera2=true;
                      
                              
                                
                                   
                                       
                                        
                                        //parser.listaIdentificadores.add(parser.listaIdentificadores.get(j-1));
                                        //parser.listaIdentificadores.add(n1);
                                        //parser.listaIdentificadores.add(parser.listaIdentificadores.get(j+1));
                                        //System.out.println("Identificador de la lista: "+ parser.listaIdentificadores.get(i)+ "  Variable que compara: "+ n1);
                                        parser.listaIdentificadores.set(i+1,n2.toString());
                                        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,parser.listaIdentificadores.get(i).toString());
                                        //System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + parser.listaIdentificadores.get(j+1));
                                        bandera = true;
                                        break;
                                    
                                
                            
                    }
                }if(bandera2){
                    
                }else{
                   parser.contErr+=1;
                   System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_ENTEROS ::= String Id Asig EXPRSTR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                 //System.out.println(" El resultado de la operacion N3: "+Integer.valueOf(n3.toString()));
                   
                  //String t=GeneradorTresDirecciones.nuevaTemp();
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_ENTEROS ::= String Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG," ",null,n2.toString());
                 System.out.println("Declaracion de variable String " + n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_ENTEROS ::= Float Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"0",null,n2.toString());
                 System.out.println("Declaracion de variable entera " + n2 + " sin valor");

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_ENTEROS ::= Float Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                 //System.out.println(" El resultado de la operacion N3: "+Integer.valueOf(n3.toString()));
                   
                  //String t=GeneradorTresDirecciones.nuevaTemp();
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_ENTEROS ::= Int Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  
                  
                       
                   
                    String t=GeneradorTresDirecciones.nuevaTemp();
                    GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,t.toString());
                    GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,t.toString(),null,n2.toString());
                    parser.contG=0;
                  
                   
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_ENTEROS ::= Int Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"0",null,n2.toString());
                 System.out.println("Declaracion de variable entera " + n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA DECLARACION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= DECLARACION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA DECLARACION_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DECLARACION_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA DECLARACION_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Int main ParentesisA ParentesisC NT$0 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FINALFUNC,null,null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCMAIN,null,null,null);


    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

