
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 17 12:06:08 CST 2022
//----------------------------------------------------

package ejerciciojflex;

import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 17 12:06:08 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\011\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\004\000\002\011\005\000\002\011\007\000\002\011\007" +
    "\000\002\011\005\000\002\011\005\000\002\011\007\000" +
    "\002\011\006\000\002\011\007\000\002\022\005\000\002" +
    "\022\003\000\002\023\002\000\002\023\003\000\002\025" +
    "\003\000\002\021\005\000\002\021\005\000\002\021\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\003\000\002\015\005\000\002\015" +
    "\007\000\002\015\006\000\002\015\007\000\002\014\005" +
    "\000\002\014\007\000\002\014\006\000\002\014\007\000" +
    "\002\033\002\000\002\006\007\000\002\030\004\000\002" +
    "\005\004\000\002\027\004\000\002\027\005\000\002\027" +
    "\007\000\002\027\007\000\002\027\003\000\002\027\003" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\004\000\002\034\002\000\002\035\002\000\002\010" +
    "\010\000\002\032\004\000\002\036\002\000\002\016\012" +
    "\000\002\037\002\000\002\016\012\000\002\040\002\000" +
    "\002\016\012\000\002\041\002\000\002\016\012\000\002" +
    "\042\002\000\002\016\012\000\002\043\002\000\002\016" +
    "\013\000\002\044\002\000\002\016\013\000\002\045\002" +
    "\000\002\016\013\000\002\046\002\000\002\016\013\000" +
    "\002\047\002\000\002\016\013\000\002\017\003\000\002" +
    "\017\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\022\005\001\002\000\004\002\320\001" +
    "\002\000\004\050\006\001\002\000\004\045\007\001\002" +
    "\000\004\044\010\001\002\000\004\047\011\001\002\000" +
    "\040\006\023\015\034\020\043\022\024\023\045\024\041" +
    "\027\044\036\026\045\033\047\032\055\046\057\015\060" +
    "\042\074\025\075\020\001\002\000\034\013\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001\002\000\042" +
    "\006\uffc9\015\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\027" +
    "\uffc9\036\uffc9\045\uffc9\046\uffc9\047\uffc9\055\uffc9\057\uffc9" +
    "\060\uffc9\074\uffc9\075\uffc9\001\002\000\042\006\ufff9\015" +
    "\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\027\ufff9\036\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\055\ufff9\057\ufff9\060\ufff9\074" +
    "\ufff9\075\ufff9\001\002\000\004\020\277\001\002\000\042" +
    "\006\023\015\034\020\043\022\024\023\045\024\041\027" +
    "\044\036\026\045\033\046\276\047\032\055\046\057\015" +
    "\060\042\074\025\075\020\001\002\000\016\006\023\015" +
    "\034\020\051\045\033\071\172\075\020\001\002\000\034" +
    "\013\uffde\037\uffde\040\uffde\041\uffde\043\uffde\044\uffde\045" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde" +
    "\001\002\000\042\006\ufffd\015\ufffd\020\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\027\ufffd\036\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\055\ufffd\057\ufffd\060\ufffd\074\ufffd\075\ufffd\001\002\000" +
    "\042\006\ufff5\015\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\027\ufff5\036\ufff5\045\ufff5\046\ufff5\047\ufff5\055\ufff5\057" +
    "\ufff5\060\ufff5\074\ufff5\075\ufff5\001\002\000\034\013\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\001\002" +
    "\000\004\020\251\001\002\000\004\020\226\001\002\000" +
    "\004\045\222\001\002\000\042\006\uffff\015\uffff\020\uffff" +
    "\022\uffff\023\uffff\024\uffff\027\uffff\036\uffff\045\uffff\046" +
    "\uffff\047\uffff\055\uffff\057\uffff\060\uffff\074\uffff\075\uffff" +
    "\001\002\000\010\013\221\040\055\041\054\001\002\000" +
    "\042\006\ufffa\015\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\027\ufffa\036\ufffa\045\ufffa\046\ufffa\047\ufffa\055\ufffa\057" +
    "\ufffa\060\ufffa\074\ufffa\075\ufffa\001\002\000\040\006\023" +
    "\015\034\020\043\022\024\023\045\024\041\027\044\036" +
    "\026\045\033\047\032\055\046\057\015\060\042\074\025" +
    "\075\020\001\002\000\014\006\023\015\034\020\051\045" +
    "\033\075\020\001\002\000\034\013\uffda\037\uffda\040\uffda" +
    "\041\uffda\043\uffda\044\uffda\045\uffda\063\uffda\064\uffda\065" +
    "\uffda\066\uffda\067\uffda\070\uffda\001\002\000\042\006\uffc8" +
    "\015\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\027\uffc8\036" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\055\uffc8\057\uffc8\060\uffc8" +
    "\074\uffc8\075\uffc8\001\002\000\034\013\uffe2\037\060\040" +
    "\uffe2\041\uffe2\043\057\044\uffe2\045\uffe2\063\uffe2\064\uffe2" +
    "\065\uffe2\066\uffe2\067\uffe2\070\uffe2\001\002\000\042\006" +
    "\ufff7\015\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\027\ufff7" +
    "\036\ufff7\045\ufff7\046\ufff7\047\ufff7\055\ufff7\057\ufff7\060" +
    "\ufff7\074\ufff7\075\ufff7\001\002\000\016\006\uffc0\015\uffc0" +
    "\020\uffc0\045\uffc0\071\uffc0\075\uffc0\001\002\000\004\045" +
    "\170\001\002\000\004\020\145\001\002\000\016\011\136" +
    "\013\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\001\002\000" +
    "\004\045\135\001\002\000\004\020\065\001\002\000\004" +
    "\045\050\001\002\000\042\006\ufff3\015\ufff3\020\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\027\ufff3\036\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\055\ufff3\057\ufff3\060\ufff3\074\ufff3\075\ufff3\001" +
    "\002\000\014\006\023\015\034\020\051\045\033\075\020" +
    "\001\002\000\034\013\uffdd\037\uffdd\040\uffdd\041\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\001\002\000\010\040\055\041\054\044" +
    "\053\001\002\000\004\013\064\001\002\000\014\006\023" +
    "\015\034\020\051\045\033\075\020\001\002\000\014\006" +
    "\023\015\034\020\051\045\033\075\020\001\002\000\034" +
    "\013\uffe4\037\060\040\uffe4\041\uffe4\043\057\044\uffe4\045" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4" +
    "\001\002\000\014\006\023\015\034\020\051\045\033\075" +
    "\020\001\002\000\014\006\023\015\034\020\051\045\033" +
    "\075\020\001\002\000\034\013\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\001\002\000\034\013\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\063\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\001\002\000" +
    "\034\013\uffe3\037\060\040\uffe3\041\uffe3\043\057\044\uffe3" +
    "\045\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\001\002\000\042\006\uffca\015\uffca\020\uffca\022\uffca" +
    "\023\uffca\024\uffca\027\uffca\036\uffca\045\uffca\046\uffca\047" +
    "\uffca\055\uffca\057\uffca\060\uffca\074\uffca\075\uffca\001\002" +
    "\000\010\011\066\013\070\045\067\001\002\000\012\013" +
    "\uffe7\015\127\020\124\040\uffe7\001\002\000\020\006\uffb0" +
    "\010\uffb0\015\uffb0\020\uffb0\021\uffb0\044\071\075\uffb0\001" +
    "\002\000\042\006\uffed\015\uffed\020\uffed\022\uffed\023\uffed" +
    "\024\uffed\027\uffed\036\uffed\045\uffed\046\uffed\047\uffed\055" +
    "\uffed\057\uffed\060\uffed\074\uffed\075\uffed\001\002\000\004" +
    "\047\uffba\001\002\000\016\006\073\010\102\015\100\020" +
    "\075\021\074\075\101\001\002\000\006\044\uffa4\053\uffa4" +
    "\001\002\000\006\044\uffa2\053\uffa2\001\002\000\006\044" +
    "\uffa1\053\uffa1\001\002\000\006\044\uffa8\053\116\001\002" +
    "\000\004\044\103\001\002\000\006\044\uffa5\053\uffa5\001" +
    "\002\000\006\044\uffa6\053\uffa6\001\002\000\006\044\uffa3" +
    "\053\uffa3\001\002\000\004\047\104\001\002\000\040\006" +
    "\023\015\034\020\043\022\024\023\045\024\041\027\044" +
    "\036\026\045\033\047\032\055\046\057\015\060\042\074" +
    "\025\075\020\001\002\000\042\006\023\015\034\020\043" +
    "\022\024\023\045\024\041\027\044\036\026\045\033\046" +
    "\112\047\032\055\046\057\015\060\042\074\025\075\020" +
    "\001\002\000\042\006\ufff8\015\ufff8\020\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\027\ufff8\036\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\055\ufff8\057\ufff8\060\ufff8\074\ufff8\075\ufff8\001\002\000" +
    "\042\006\ufffe\015\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\027\ufffe\036\ufffe\045\ufffe\046\ufffe\047\ufffe\055\ufffe\057" +
    "\ufffe\060\ufffe\074\ufffe\075\ufffe\001\002\000\042\006\ufff4" +
    "\015\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\027\ufff4\036" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\055\ufff4\057\ufff4\060\ufff4" +
    "\074\ufff4\075\ufff4\001\002\000\042\006\ufffc\015\ufffc\020" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\027\ufffc\036\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\055\ufffc\057\ufffc\060\ufffc\074\ufffc\075" +
    "\ufffc\001\002\000\042\006\uffaf\015\uffaf\020\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\027\uffaf\036\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\055\uffaf\057\uffaf\060\uffaf\074\uffaf\075\uffaf\001\002" +
    "\000\042\006\ufffb\015\ufffb\020\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\027\ufffb\036\ufffb\045\ufffb\046\ufffb\047\ufffb\055\ufffb" +
    "\057\ufffb\060\ufffb\074\ufffb\075\ufffb\001\002\000\042\006" +
    "\ufff6\015\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\027\ufff6" +
    "\036\ufff6\045\ufff6\046\ufff6\047\ufff6\055\ufff6\057\ufff6\060" +
    "\ufff6\074\ufff6\075\ufff6\001\002\000\042\006\ufff2\015\ufff2" +
    "\020\ufff2\022\ufff2\023\ufff2\024\ufff2\027\ufff2\036\ufff2\045" +
    "\ufff2\046\ufff2\047\ufff2\055\ufff2\057\ufff2\060\ufff2\074\ufff2" +
    "\075\ufff2\001\002\000\016\006\073\010\102\015\100\020" +
    "\075\021\074\075\101\001\002\000\004\044\uffa7\001\002" +
    "\000\004\047\121\001\002\000\040\006\023\015\034\020" +
    "\043\022\024\023\045\024\041\027\044\036\026\045\033" +
    "\047\032\055\046\057\015\060\042\074\025\075\020\001" +
    "\002\000\042\006\023\015\034\020\043\022\024\023\045" +
    "\024\041\027\044\036\026\045\033\046\123\047\032\055" +
    "\046\057\015\060\042\074\025\075\020\001\002\000\042" +
    "\006\uffb9\015\uffb9\020\uffb9\022\uffb9\023\uffb9\024\uffb9\027" +
    "\uffb9\036\uffb9\045\uffb9\046\uffb9\047\uffb9\055\uffb9\057\uffb9" +
    "\060\uffb9\074\uffb9\075\uffb9\001\002\000\004\013\134\001" +
    "\002\000\006\013\uffe8\040\uffe8\001\002\000\006\013\131" +
    "\040\132\001\002\000\006\013\uffe5\040\uffe5\001\002\000" +
    "\006\013\uffe6\040\uffe6\001\002\000\042\006\uffec\015\uffec" +
    "\020\uffec\022\uffec\023\uffec\024\uffec\027\uffec\036\uffec\045" +
    "\uffec\046\uffec\047\uffec\055\uffec\057\uffec\060\uffec\074\uffec" +
    "\075\uffec\001\002\000\010\013\uffe7\015\127\040\uffe7\001" +
    "\002\000\006\013\uffe9\040\uffe9\001\002\000\042\006\uffea" +
    "\015\uffea\020\uffea\022\uffea\023\uffea\024\uffea\027\uffea\036" +
    "\uffea\045\uffea\046\uffea\047\uffea\055\uffea\057\uffea\060\uffea" +
    "\074\uffea\075\uffea\001\002\000\016\006\uffbd\015\uffbd\020" +
    "\uffbd\045\uffbd\071\uffbd\075\uffbd\001\002\000\020\006\023" +
    "\010\137\015\034\020\051\021\140\045\033\075\020\001" +
    "\002\000\004\013\144\001\002\000\004\013\143\001\002" +
    "\000\010\013\142\040\055\041\054\001\002\000\042\006" +
    "\uffeb\015\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\027\uffeb" +
    "\036\uffeb\045\uffeb\046\uffeb\047\uffeb\055\uffeb\057\uffeb\060" +
    "\uffeb\074\uffeb\075\uffeb\001\002\000\042\006\uffd7\015\uffd7" +
    "\020\uffd7\022\uffd7\023\uffd7\024\uffd7\027\uffd7\036\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\055\uffd7\057\uffd7\060\uffd7\074\uffd7" +
    "\075\uffd7\001\002\000\042\006\uffd3\015\uffd3\020\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\027\uffd3\036\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\055\uffd3\057\uffd3\060\uffd3\074\uffd3\075\uffd3\001" +
    "\002\000\010\011\146\013\150\045\147\001\002\000\006" +
    "\010\165\020\164\001\002\000\020\006\uffac\010\uffac\015" +
    "\uffac\020\uffac\021\uffac\044\151\075\uffac\001\002\000\042" +
    "\006\uffd5\015\uffd5\020\uffd5\022\uffd5\023\uffd5\024\uffd5\027" +
    "\uffd5\036\uffd5\045\uffd5\046\uffd5\047\uffd5\055\uffd5\057\uffd5" +
    "\060\uffd5\074\uffd5\075\uffd5\001\002\000\004\047\uffb4\001" +
    "\002\000\016\006\073\010\102\015\100\020\075\021\074" +
    "\075\101\001\002\000\004\044\154\001\002\000\004\047" +
    "\155\001\002\000\040\006\023\015\034\020\043\022\024" +
    "\023\045\024\041\027\044\036\026\045\033\047\032\055" +
    "\046\057\015\060\042\074\025\075\020\001\002\000\042" +
    "\006\023\015\034\020\043\022\024\023\045\024\041\027" +
    "\044\036\026\045\033\046\157\047\032\055\046\057\015" +
    "\060\042\074\025\075\020\001\002\000\042\006\uffab\015" +
    "\uffab\020\uffab\022\uffab\023\uffab\024\uffab\027\uffab\036\uffab" +
    "\045\uffab\046\uffab\047\uffab\055\uffab\057\uffab\060\uffab\074" +
    "\uffab\075\uffab\001\002\000\004\047\161\001\002\000\040" +
    "\006\023\015\034\020\043\022\024\023\045\024\041\027" +
    "\044\036\026\045\033\047\032\055\046\057\015\060\042" +
    "\074\025\075\020\001\002\000\042\006\023\015\034\020" +
    "\043\022\024\023\045\024\041\027\044\036\026\045\033" +
    "\046\163\047\032\055\046\057\015\060\042\074\025\075" +
    "\020\001\002\000\042\006\uffb3\015\uffb3\020\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\027\uffb3\036\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\055\uffb3\057\uffb3\060\uffb3\074\uffb3\075\uffb3\001\002" +
    "\000\004\013\167\001\002\000\004\013\166\001\002\000" +
    "\042\006\uffd4\015\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\027\uffd4\036\uffd4\045\uffd4\046\uffd4\047\uffd4\055\uffd4\057" +
    "\uffd4\060\uffd4\074\uffd4\075\uffd4\001\002\000\042\006\uffd2" +
    "\015\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\027\uffd2\036" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\055\uffd2\057\uffd2\060\uffd2" +
    "\074\uffd2\075\uffd2\001\002\000\016\006\uffcf\015\uffcf\020" +
    "\uffcf\045\uffcf\071\uffcf\075\uffcf\001\002\000\016\006\023" +
    "\015\034\020\051\045\033\071\172\075\020\001\002\000" +
    "\016\006\023\015\034\020\051\045\033\071\172\075\020" +
    "\001\002\000\022\040\055\041\054\063\201\064\204\065" +
    "\200\066\205\067\202\070\203\001\002\000\004\044\175" +
    "\001\002\000\026\006\uffbf\015\uffbf\020\uffbf\024\uffbf\027" +
    "\uffbf\036\uffbf\045\uffbf\047\uffbf\055\uffbf\075\uffbf\001\002" +
    "\000\026\006\023\015\034\020\051\024\041\027\044\036" +
    "\026\045\033\047\032\055\046\075\020\001\002\000\042" +
    "\006\uffbe\015\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\027" +
    "\uffbe\036\uffbe\045\uffbe\046\uffbe\047\uffbe\055\uffbe\057\uffbe" +
    "\060\uffbe\074\uffbe\075\uffbe\001\002\000\014\006\023\015" +
    "\034\020\051\045\033\075\020\001\002\000\014\006\023" +
    "\015\034\020\051\045\033\075\020\001\002\000\014\006" +
    "\023\015\034\020\051\045\033\075\020\001\002\000\014" +
    "\006\023\015\034\020\051\045\033\075\020\001\002\000" +
    "\014\006\023\015\034\020\051\045\033\075\020\001\002" +
    "\000\014\006\023\015\034\020\051\045\033\075\020\001" +
    "\002\000\010\040\055\041\054\044\uffc4\001\002\000\010" +
    "\040\055\041\054\044\uffc6\001\002\000\010\040\055\041" +
    "\054\044\uffc2\001\002\000\010\040\055\041\054\044\uffc3" +
    "\001\002\000\010\040\055\041\054\044\uffc7\001\002\000" +
    "\010\040\055\041\054\044\uffc5\001\002\000\004\044\uffc1" +
    "\001\002\000\010\040\055\041\054\045\216\001\002\000" +
    "\034\013\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb" +
    "\045\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\001\002\000\042\006\023\015\034\020\043\022\024" +
    "\023\045\024\041\027\044\036\026\045\033\046\220\047" +
    "\032\055\046\057\015\060\042\074\025\075\020\001\002" +
    "\000\042\006\uffcc\015\uffcc\020\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\027\uffcc\036\uffcc\045\uffcc\046\uffcc\047\uffcc\055\uffcc" +
    "\057\uffcc\060\uffcc\074\uffcc\075\uffcc\001\002\000\042\006" +
    "\uffcd\015\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\027\uffcd" +
    "\036\uffcd\045\uffcd\046\uffcd\047\uffcd\055\uffcd\057\uffcd\060" +
    "\uffcd\074\uffcd\075\uffcd\001\002\000\014\006\023\015\034" +
    "\020\051\045\033\075\020\001\002\000\010\040\055\041" +
    "\054\044\224\001\002\000\004\013\225\001\002\000\042" +
    "\006\uffcb\015\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\027" +
    "\uffcb\036\uffcb\045\uffcb\046\uffcb\047\uffcb\055\uffcb\057\uffcb" +
    "\060\uffcb\074\uffcb\075\uffcb\001\002\000\010\011\227\013" +
    "\231\045\230\001\002\000\006\020\246\021\245\001\002" +
    "\000\020\006\uffaa\010\uffaa\015\uffaa\020\uffaa\021\uffaa\044" +
    "\232\075\uffaa\001\002\000\042\006\uffd9\015\uffd9\020\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\027\uffd9\036\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\055\uffd9\057\uffd9\060\uffd9\074\uffd9\075\uffd9" +
    "\001\002\000\004\047\uffb6\001\002\000\016\006\073\010" +
    "\102\015\100\020\075\021\074\075\101\001\002\000\004" +
    "\044\235\001\002\000\004\047\236\001\002\000\040\006" +
    "\023\015\034\020\043\022\024\023\045\024\041\027\044" +
    "\036\026\045\033\047\032\055\046\057\015\060\042\074" +
    "\025\075\020\001\002\000\042\006\023\015\034\020\043" +
    "\022\024\023\045\024\041\027\044\036\026\045\033\046" +
    "\240\047\032\055\046\057\015\060\042\074\025\075\020" +
    "\001\002\000\042\006\uffa9\015\uffa9\020\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\027\uffa9\036\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\055\uffa9\057\uffa9\060\uffa9\074\uffa9\075\uffa9\001\002\000" +
    "\004\047\242\001\002\000\040\006\023\015\034\020\043" +
    "\022\024\023\045\024\041\027\044\036\026\045\033\047" +
    "\032\055\046\057\015\060\042\074\025\075\020\001\002" +
    "\000\042\006\023\015\034\020\043\022\024\023\045\024" +
    "\041\027\044\036\026\045\033\046\244\047\032\055\046" +
    "\057\015\060\042\074\025\075\020\001\002\000\042\006" +
    "\uffb5\015\uffb5\020\uffb5\022\uffb5\023\uffb5\024\uffb5\027\uffb5" +
    "\036\uffb5\045\uffb5\046\uffb5\047\uffb5\055\uffb5\057\uffb5\060" +
    "\uffb5\074\uffb5\075\uffb5\001\002\000\004\013\250\001\002" +
    "\000\004\013\247\001\002\000\042\006\uffd6\015\uffd6\020" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\027\uffd6\036\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\055\uffd6\057\uffd6\060\uffd6\074\uffd6\075" +
    "\uffd6\001\002\000\042\006\uffd8\015\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\027\uffd8\036\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\055\uffd8\057\uffd8\060\uffd8\074\uffd8\075\uffd8\001\002" +
    "\000\010\011\252\013\254\045\253\001\002\000\014\006" +
    "\023\015\034\020\051\045\033\075\020\001\002\000\020" +
    "\006\uffb2\010\uffb2\015\uffb2\020\uffb2\021\uffb2\044\255\075" +
    "\uffb2\001\002\000\042\006\ufff1\015\ufff1\020\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\027\ufff1\036\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\055\ufff1\057\ufff1\060\ufff1\074\ufff1\075\ufff1\001\002" +
    "\000\004\047\uffbc\001\002\000\016\006\073\010\102\015" +
    "\100\020\075\021\074\075\101\001\002\000\004\044\260" +
    "\001\002\000\004\047\261\001\002\000\040\006\023\015" +
    "\034\020\043\022\024\023\045\024\041\027\044\036\026" +
    "\045\033\047\032\055\046\057\015\060\042\074\025\075" +
    "\020\001\002\000\042\006\023\015\034\020\043\022\024" +
    "\023\045\024\041\027\044\036\026\045\033\046\263\047" +
    "\032\055\046\057\015\060\042\074\025\075\020\001\002" +
    "\000\042\006\uffb1\015\uffb1\020\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\027\uffb1\036\uffb1\045\uffb1\046\uffb1\047\uffb1\055\uffb1" +
    "\057\uffb1\060\uffb1\074\uffb1\075\uffb1\001\002\000\004\047" +
    "\265\001\002\000\040\006\023\015\034\020\043\022\024" +
    "\023\045\024\041\027\044\036\026\045\033\047\032\055" +
    "\046\057\015\060\042\074\025\075\020\001\002\000\042" +
    "\006\023\015\034\020\043\022\024\023\045\024\041\027" +
    "\044\036\026\045\033\046\267\047\032\055\046\057\015" +
    "\060\042\074\025\075\020\001\002\000\042\006\uffbb\015" +
    "\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb\027\uffbb\036\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\055\uffbb\057\uffbb\060\uffbb\074" +
    "\uffbb\075\uffbb\001\002\000\010\013\271\040\055\041\054" +
    "\001\002\000\042\006\ufff0\015\ufff0\020\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\027\ufff0\036\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\055\ufff0\057\ufff0\060\ufff0\074\ufff0\075\ufff0\001\002\000" +
    "\004\044\273\001\002\000\026\006\uffd1\015\uffd1\020\uffd1" +
    "\024\uffd1\027\uffd1\036\uffd1\045\uffd1\047\uffd1\055\uffd1\075" +
    "\uffd1\001\002\000\026\006\023\015\034\020\051\024\041" +
    "\027\044\036\026\045\033\047\032\055\046\075\020\001" +
    "\002\000\042\006\uffd0\015\uffd0\020\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\027\uffd0\036\uffd0\045\uffd0\046\uffd0\047\uffd0\055" +
    "\uffd0\057\uffd0\060\uffd0\074\uffd0\075\uffd0\001\002\000\004" +
    "\002\000\001\002\000\010\011\300\013\302\045\301\001" +
    "\002\000\014\006\023\015\034\020\051\045\033\075\020" +
    "\001\002\000\020\006\uffae\010\uffae\015\uffae\020\uffae\021" +
    "\uffae\044\304\075\uffae\001\002\000\042\006\uffee\015\uffee" +
    "\020\uffee\022\uffee\023\uffee\024\uffee\027\uffee\036\uffee\045" +
    "\uffee\046\uffee\047\uffee\055\uffee\057\uffee\060\uffee\074\uffee" +
    "\075\uffee\001\002\000\016\006\073\010\102\015\100\020" +
    "\075\021\074\075\101\001\002\000\004\047\uffb8\001\002" +
    "\000\004\047\306\001\002\000\040\006\023\015\034\020" +
    "\043\022\024\023\045\024\041\027\044\036\026\045\033" +
    "\047\032\055\046\057\015\060\042\074\025\075\020\001" +
    "\002\000\042\006\023\015\034\020\043\022\024\023\045" +
    "\024\041\027\044\036\026\045\033\046\310\047\032\055" +
    "\046\057\015\060\042\074\025\075\020\001\002\000\042" +
    "\006\uffb7\015\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7\027" +
    "\uffb7\036\uffb7\045\uffb7\046\uffb7\047\uffb7\055\uffb7\057\uffb7" +
    "\060\uffb7\074\uffb7\075\uffb7\001\002\000\004\044\312\001" +
    "\002\000\004\047\313\001\002\000\040\006\023\015\034" +
    "\020\043\022\024\023\045\024\041\027\044\036\026\045" +
    "\033\047\032\055\046\057\015\060\042\074\025\075\020" +
    "\001\002\000\042\006\023\015\034\020\043\022\024\023" +
    "\045\024\041\027\044\036\026\045\033\046\315\047\032" +
    "\055\046\057\015\060\042\074\025\075\020\001\002\000" +
    "\042\006\uffad\015\uffad\020\uffad\022\uffad\023\uffad\024\uffad" +
    "\027\uffad\036\uffad\045\uffad\046\uffad\047\uffad\055\uffad\057" +
    "\uffad\060\uffad\074\uffad\075\uffad\001\002\000\010\013\317" +
    "\040\055\041\054\001\002\000\042\006\uffef\015\uffef\020" +
    "\uffef\022\uffef\023\uffef\024\uffef\027\uffef\036\uffef\045\uffef" +
    "\046\uffef\047\uffef\055\uffef\057\uffef\060\uffef\074\uffef\075" +
    "\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\015\006\012\010\034\011\026\012" +
    "\013\013\036\014\021\015\030\016\046\021\027\024\035" +
    "\026\011\027\020\030\016\032\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\012\010\034\011\110\012\105\013\113\014" +
    "\107\015\112\016\114\021\027\024\035\026\011\027\106" +
    "\030\016\032\037\001\001\000\012\021\172\024\035\026" +
    "\011\031\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\216\006\012\010" +
    "\034\011\026\012\013\013\036\014\021\015\030\016\046" +
    "\021\027\024\035\026\011\027\020\030\016\032\037\001" +
    "\001\000\010\021\214\024\035\026\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\051" +
    "\024\035\026\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\062\026\011\001\001" +
    "\000\006\024\055\026\011\001\001\000\002\001\001\000" +
    "\004\026\061\001\001\000\004\026\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\125\023\124\025\127" +
    "\001\001\000\004\044\071\001\001\000\002\001\001\000" +
    "\004\037\117\001\001\000\006\017\076\020\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\104\006\012\010\034\011\026\012\013\013\036\014\021" +
    "\015\030\016\046\021\027\024\035\026\011\027\020\030" +
    "\016\032\037\001\001\000\036\006\012\010\034\011\110" +
    "\012\105\013\113\014\107\015\112\016\114\021\027\024" +
    "\035\026\011\027\106\030\016\032\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\116\020\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\121\006\012" +
    "\010\034\011\026\012\013\013\036\014\021\015\030\016" +
    "\046\021\027\024\035\026\011\027\020\030\016\032\037" +
    "\001\001\000\036\006\012\010\034\011\110\012\105\013" +
    "\113\014\107\015\112\016\114\021\027\024\035\026\011" +
    "\027\106\030\016\032\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\132\025\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\140\024\035\026\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\151\001\001" +
    "\000\002\001\001\000\004\042\157\001\001\000\006\017" +
    "\152\020\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\155\006\012\010\034\011\026\012\013\013" +
    "\036\014\021\015\030\016\046\021\027\024\035\026\011" +
    "\027\020\030\016\032\037\001\001\000\036\006\012\010" +
    "\034\011\110\012\105\013\113\014\107\015\112\016\114" +
    "\021\027\024\035\026\011\027\106\030\016\032\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\161" +
    "\006\012\010\034\011\026\012\013\013\036\014\021\015" +
    "\030\016\046\021\027\024\035\026\011\027\020\030\016" +
    "\032\037\001\001\000\036\006\012\010\034\011\110\012" +
    "\105\013\113\014\107\015\112\016\114\021\027\024\035" +
    "\026\011\027\106\030\016\032\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\172\024" +
    "\035\026\011\031\173\001\001\000\012\021\172\024\035" +
    "\026\011\031\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\175\001\001\000\022\006\012\010\034" +
    "\021\027\024\035\026\011\027\176\030\016\032\037\001" +
    "\001\000\002\001\001\000\010\021\212\024\035\026\011" +
    "\001\001\000\010\021\211\024\035\026\011\001\001\000" +
    "\010\021\210\024\035\026\011\001\001\000\010\021\207" +
    "\024\035\026\011\001\001\000\010\021\206\024\035\026" +
    "\011\001\001\000\010\021\205\024\035\026\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\012\010\034\011\110\012\105\013\113\014\107\015\112" +
    "\016\114\021\027\024\035\026\011\027\106\030\016\032" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\222\024\035\026\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\232\001\001\000\002\001\001\000" +
    "\004\041\240\001\001\000\006\017\233\020\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\236\006" +
    "\012\010\034\011\026\012\013\013\036\014\021\015\030" +
    "\016\046\021\027\024\035\026\011\027\020\030\016\032" +
    "\037\001\001\000\036\006\012\010\034\011\110\012\105" +
    "\013\113\014\107\015\112\016\114\021\027\024\035\026" +
    "\011\027\106\030\016\032\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\242\006\012\010\034\011" +
    "\026\012\013\013\036\014\021\015\030\016\046\021\027" +
    "\024\035\026\011\027\020\030\016\032\037\001\001\000" +
    "\036\006\012\010\034\011\110\012\105\013\113\014\107" +
    "\015\112\016\114\021\027\024\035\026\011\027\106\030" +
    "\016\032\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\267\024\035\026\011\001\001" +
    "\000\004\043\255\001\001\000\002\001\001\000\004\036" +
    "\263\001\001\000\006\017\256\020\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\261\006\012\010" +
    "\034\011\026\012\013\013\036\014\021\015\030\016\046" +
    "\021\027\024\035\026\011\027\020\030\016\032\037\001" +
    "\001\000\036\006\012\010\034\011\110\012\105\013\113" +
    "\014\107\015\112\016\114\021\027\024\035\026\011\027" +
    "\106\030\016\032\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\265\006\012\010\034\011\026\012" +
    "\013\013\036\014\021\015\030\016\046\021\027\024\035" +
    "\026\011\027\020\030\016\032\037\001\001\000\036\006" +
    "\012\010\034\011\110\012\105\013\113\014\107\015\112" +
    "\016\114\021\027\024\035\026\011\027\106\030\016\032" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\273\001\001\000" +
    "\022\006\012\010\034\021\027\024\035\026\011\027\274" +
    "\030\016\032\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\315\024\035\026\011" +
    "\001\001\000\004\045\302\001\001\000\002\001\001\000" +
    "\006\017\310\020\075\001\001\000\004\040\304\001\001" +
    "\000\002\001\001\000\040\004\306\006\012\010\034\011" +
    "\026\012\013\013\036\014\021\015\030\016\046\021\027" +
    "\024\035\026\011\027\020\030\016\032\037\001\001\000" +
    "\036\006\012\010\034\011\110\012\105\013\113\014\107" +
    "\015\112\016\114\021\027\024\035\026\011\027\106\030" +
    "\016\032\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\313\006\012\010\034\011" +
    "\026\012\013\013\036\014\021\015\030\016\046\021\027" +
    "\024\035\026\011\027\020\030\016\032\037\001\001\000" +
    "\036\006\012\010\034\011\110\012\105\013\113\014\107" +
    "\015\112\016\114\021\027\024\035\026\011\027\106\030" +
    "\016\032\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Object> listaIdentificadores = new ArrayList<Object>(); 
    public int cont = 0;
    public int contErr =0;
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PARAMETROS_AUX ::= Id 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PARAMETROS_AUX ::= Char 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PARAMETROS_AUX ::= Boolean 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PARAMETROS_AUX ::= Flotante 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PARAMETROS_AUX ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PARAMETROS_AUX ::= Entero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PARAMETRO,n1.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS_AUX",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PARAMETROS ::= PARAMETROS_AUX Coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROS ::= PARAMETROS_AUX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FUNCION ::= CharType Id ParentesisA NT$12 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$12 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

           GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            System.out.println("Yisus10");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FUNCION ::= Bool Id ParentesisA NT$11 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$11 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

           GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            System.out.println("Yisus9");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCION ::= Float Id ParentesisA NT$10 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$10 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            System.out.println("Yisus8");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCION ::= String Id ParentesisA NT$9 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$9 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            System.out.println("Yisus7");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCION ::= Int Id ParentesisA NT$8 PARAMETROS ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int paramsFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int paramsFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object paramsFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$8 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

           GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            System.out.println("Yisus6");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCION ::= Bool Id ParentesisA ParentesisC NT$7 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$7 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            System.out.println("Yisus5");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION ::= CharType Id ParentesisA ParentesisC NT$6 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$6 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            System.out.println("Yisus4");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= Float Id ParentesisA ParentesisC NT$5 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$5 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
            System.out.println("Yisus3");
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FUNCION ::= String Id ParentesisA ParentesisC NT$4 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$4 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

             System.out.println("Yisus2");
            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FUNCION ::= Int Id ParentesisA ParentesisC NT$3 LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.CIERREFUNCION,nombreFuncion.toString(),null,null);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$3 ::= 
            {
              Object RESULT =null;
		int nombreFuncionleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nombreFuncionright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object nombreFuncion = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

            System.out.println("Yisus1");
            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.FUNCION,nombreFuncion.toString(),null,null);
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parteWhile ::= While ParentesisA 
            {
              EtiquetaRedir RESULT =null;
		
                                String inicio=GeneradorTresDirecciones.nuevaEtiqueta();
                                String fin=GeneradorTresDirecciones.nuevaEtiqueta();
                                RESULT = new EtiquetaRedir(inicio,fin);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parteWhile",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_WHILE ::= parteWhile NT$1 CONDICION ParentesisC NT$2 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO,null,null,et.getInicio());
                        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,c.f());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,c.v());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$1 ::= 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,et.getInicio());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION ::= Negacion CONDICION 
            {
              DosEtiquetas RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new DosEtiquetas(cond.f(), cond.v());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= EXPR MayorIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMAYORIGUAL, e1, e2, f);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= EXPR Mayor EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMAYOR, e2, e1, v);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= EXPR MenorIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMENORIGUAL, e2, e1, f);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= EXPR Menor EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
        String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMENOR, e1, e2, v);
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= EXPR Diferente EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
        String f = GeneradorTresDirecciones.nuevaEtiqueta();
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFEQUAL, e1, e2, f);    
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= EXPR IgualIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    String v = GeneradorTresDirecciones.nuevaEtiqueta();
    String f = GeneradorTresDirecciones.nuevaEtiqueta();
    GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFEQUAL, e1, e2, v);    
    GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
    RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENT ::= SENTENCIA_WHILE 
            {
              String RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENT ::= DECLARACION_IF 
            {
              String RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT ::= Read ParentesisA EXPR ParentesisC ExprFinal 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.READ, null, null, e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENT ::= Print ParentesisA EXPR ParentesisC ExprFinal 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PRINT, null, null, e);
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENT ::= LlaveA SENTENCIA LlaveC 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENT ::= EXPR ExprFinal 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = e1; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARTE_ELSE ::= Else SENT 
            {
              Object RESULT =null;
		 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARTE_ELSE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARTEIF ::= If ParentesisA 
            {
              EtiquetaRedir RESULT =null;
		 
        RESULT = new EtiquetaRedir(null,null);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARTEIF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_IF ::= PARTEIF CONDICION ParentesisC NT$0 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
       
        String fin = GeneradorTresDirecciones.nuevaEtiqueta();
        //System.out.println("EL VALOR DE FIN= "+fin);
        et.fin(fin);           
        //System.out.println("EL VALOR DE ET= "+et.getFin());
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, et.getFin());
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, cond.f());
        
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, et.getFin());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$0 ::= 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, cond.v());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_BOOLEAN ::= Bool Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,parser.listaIdentificadores.get(i+1).toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_BOOLEAN ::= Id Asig Boolean ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.set(i+1,n2);
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                             parser.contErr+=1;
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCOTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_BOOLEAN ::= Bool Id Asig Boolean ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  System.out.println("Declaracion de variable Boolean "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_BOOLEAN ::= Bool Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"false",null,n2.toString());
                
                 System.out.println("Declaracion de variable Boolean: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_CHAR ::= CharType Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("char")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO CHAR");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_CHAR ::= Id Asig Char ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("char")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,n1.toString());
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCOTRADA NO ES DE TIPO CHAR");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_CHAR ::= CharType Id Asig Char ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  System.out.println("Declaracion de variable Char "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_CHAR ::= CharType Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"",null,n2.toString());
                 System.out.println("Declaracion de variable Char: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TERMINO ::= Cadena 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=n1.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TERMINO ::= ParentesisA EXPR ParentesisA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT=e1;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TERMINO ::= Flotante 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERMINO ::= Id 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    boolean bandera = false;
                    boolean bandera2 = false;
                    for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){

                        if(parser.listaIdentificadores.get(i).equals(n1)){

                                bandera2=true;

                                            
                        }
                        }if(bandera2){
                             RESULT=n1.toString();
                        }else{
                           parser.contErr+=1;
                           System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                           RESULT=n1.toString(); 
                       }
                            
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERMINO ::= Entero 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    
                    RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FACTOR ::= TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT=n1;
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FACTOR ::= FACTOR Division TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String t=GeneradorTresDirecciones.nuevaTemp();
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.DIVISION,n1.toString(),n2.toString(),t);
         RESULT= t;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= FACTOR Multiplicacion TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
     String t=GeneradorTresDirecciones.nuevaTemp();
     GeneradorTresDirecciones.generador(GeneradorTresDirecciones.POR,n1.toString(),n2.toString(),t);
    // System.out.println("Pronado n1: " + n1 + " Provando n2 : "+ n2);
     RESULT= t;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPR ::= FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               //System.out.println("Este es n1 " + n1);
                //GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,parser.listaIdentificadores.get(parser.listaIdentificadores.size()-2).toString());
              RESULT= n1;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPR ::= EXPR Resta FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
             String t=GeneradorTresDirecciones.nuevaTemp();
             GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MENOS,n1.toString(),n2.toString(),t);
             RESULT= t;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPR ::= EXPR Suma FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               String t=GeneradorTresDirecciones.nuevaTemp();
               GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MAS,n1.toString(),n2.toString(),t);
               //System.out.println("Este es n2 " + n2 + "este es n1: " +n1);
                RESULT= t;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TERMINOSTR ::= Cadena 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    
                    RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINOSTR",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FACTORSTR ::= TERMINOSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT=n1;
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTORSTR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FACTORSTR ::= 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTORSTR",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRSTR ::= FACTORSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               //System.out.println("Este es n1 " + n1);
                //GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,parser.listaIdentificadores.get(parser.listaIdentificadores.size()-2).toString());
              RESULT= n1;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRSTR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRSTR ::= EXPRSTR Suma FACTORSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               String t=GeneradorTresDirecciones.nuevaTemp();
               GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MAS,n1.toString(),n2.toString(),t);
               //System.out.println("Este es n2 " + n2 + "este es n1: " +n1);
                RESULT= t;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRSTR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_ENTEROS ::= String Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 //System.out.println(n3);
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("string")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,parser.listaIdentificadores.get(i+1).toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO STRING");
                        }
                    }
                }
                if(bandera){

                }else{
                    parser.contErr+=1;
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_ENTEROS ::= Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                
                boolean bandera = false;
                boolean bandera2 = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                            
                            bandera2=true;
                      
                              
                                
                                   
                                       
                                        
                                        //parser.listaIdentificadores.add(parser.listaIdentificadores.get(j-1));
                                        //parser.listaIdentificadores.add(n1);
                                        //parser.listaIdentificadores.add(parser.listaIdentificadores.get(j+1));
                                        //System.out.println("Identificador de la lista: "+ parser.listaIdentificadores.get(i)+ "  Variable que compara: "+ n1);
                                        parser.listaIdentificadores.set(i+1,n2.toString());
                                        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,parser.listaIdentificadores.get(i).toString());
                                        //System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + parser.listaIdentificadores.get(j+1));
                                        bandera = true;
                                        break;
                                    
                                
                            
                    }
                }if(bandera2){
                    
                }else{
                   parser.contErr+=1;
                   System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_ENTEROS ::= String Id Asig EXPRSTR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                 //System.out.println(" El resultado de la operacion N3: "+Integer.valueOf(n3.toString()));
                   
                  //String t=GeneradorTresDirecciones.nuevaTemp();
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_ENTEROS ::= String Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG," ",null,n2.toString());
                 System.out.println("Declaracion de variable String " + n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_ENTEROS ::= Float Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"0",null,n2.toString());
                 System.out.println("Declaracion de variable entera " + n2 + " sin valor");

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_ENTEROS ::= Float Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                 //System.out.println(" El resultado de la operacion N3: "+Integer.valueOf(n3.toString()));
                   
                  //String t=GeneradorTresDirecciones.nuevaTemp();
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_ENTEROS ::= Int Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  if(n3.contains(".")){
                        System.out.println("ERROR SEMANTICO: EL TIPO INT NO RECONOCE: "+n3);

                  }else{
                        parser.listaIdentificadores.add(n1);
                        parser.listaIdentificadores.add(n2);
                        parser.listaIdentificadores.add(n3);
                       //System.out.println(" El resultado de la operacion N3: ");
                        //System.out.println("Declaracion de variable entera " + n2 + "con valor: "+n3);
                        //String t=GeneradorTresDirecciones.nuevaTemp();
                        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());

                  }
                  
                  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_ENTEROS ::= Int Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"0",null,n2.toString());
                 System.out.println("Declaracion de variable entera " + n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= DECLARACION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int main ParentesisA ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

